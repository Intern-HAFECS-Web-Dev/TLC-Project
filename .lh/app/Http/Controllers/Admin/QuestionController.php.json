{
    "sourceFile": "app/Http/Controllers/Admin/QuestionController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1733886956383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733889074492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n             $question->answers()->delete();\n             $question->delete();\n \n             DB::commit();\n-\n+            alert('success', 'Question deleted successfully!');\n             return redirect()->route('admin.categori.questions.index', $categori)->with('success', 'Question deleted successfully.');\n         } catch (\\Exception $e) {\n             DB::rollBack();\n             return back()->withErrors(['error' => 'Failed to delete question: ' . $e->getMessage()]);\n"
                }
            ],
            "date": 1733886956383,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Category;\nuse App\\Models\\Question;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\DB;\n\nclass QuestionController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     */\n    public function index(Category $categori)\n    {\n        $questions = $categori->questions()->get();\n\n        // return view('admin.question.index', compact('categori'))->with('title', 'Question');\n\n        return view('admin.question.index', compact('categori', 'questions'))->with('title', 'Question');\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     */\n    public function create(Category $categori)\n    {\n        return view('admin.question.create', compact('categori'))->with('title', 'Question');\n    }\n\n    public function store(Request $request, Category $categori)\n    {\n        // Validate the request\n        $request->validate([\n            'question' => 'required|string|max:255',\n            'answer' => 'required|array',\n            'answer.*' => 'required|string|max:255',\n            'correct_answer' => 'required|integer|in:0,1,2,3',\n        ]);\n\n        DB::beginTransaction();\n\n        try {\n            // Create the question\n            $question = $categori->questions()->create([\n                'question' => $request->question,\n            ]);\n\n            // Loop answers from request perulangan di view form\n            foreach ($request->answer as $index => $answerText) {\n                $isCorrect = ($request->correct_answer == $index);\n                $question->answers()->create([\n                    'answer' => $answerText,\n                    'is_correct' => $isCorrect,\n                ]);\n            }\n\n            DB::commit();\n\n            // return \"ok\";\n            return redirect()->route('admin.categori.questions.index', $categori)->with('title', 'Question');\n        } catch (\\Exception $e) {\n            DB::rollBack();\n            return response()->json(['error' => 'Failed to create question: ' . $e->getMessage()], 500); // Return error response\n        }\n    }\n\n\n\n    /**\n     * Display the specified resource.\n     */\n    public function show(string $id)\n    {\n        //\n    }\n\n    public function edit(Category $categori, Question $question)\n    {\n        $title = \"Edit Question\";\n        $answers = $question->answers()->get();\n\n        // return $answers;\n        return view('admin.question.edit', compact('title', 'question', 'answers', 'categori'));\n    }\n\n    public function update(Request $request, Category $categori, Question $question)\n    {\n        $request->validate([\n            'question' => 'required|string|max:255',\n            'answer' => 'required|array',\n            'answer.*' => 'required|string|max:255',\n            'correct_answer' => 'required|integer',\n        ]);\n\n        DB::beginTransaction();\n\n        try {\n            $question->update([\n                'question' => $request->question,\n            ]);\n\n            $question->answers()->delete();\n\n            foreach ($request->answer as $index => $answerText) {\n                $isCorrect = ($request->correct_answer == $index);\n                $question->answers()->create([\n                    'answer' => $answerText,\n                    'is_correct' => $isCorrect,\n                ]);\n            }\n\n            DB::commit();\n\n            return redirect()->route('admin.categori.questions.index', $categori)->with('success', 'Question updated successfully.');\n        } catch (\\Exception $e) {\n            DB::rollBack();\n            return back()->withErrors(['error' => 'Failed to update question: ' . $e->getMessage()]);\n        }\n    }\n\n    public function destroy(Category $categori, Question $question)\n    {\n        DB::beginTransaction();\n\n        try {\n            $question->answers()->delete();\n            $question->delete();\n\n            DB::commit();\n\n            return redirect()->route('admin.categori.questions.index', $categori)->with('success', 'Question deleted successfully.');\n        } catch (\\Exception $e) {\n            DB::rollBack();\n            return back()->withErrors(['error' => 'Failed to delete question: ' . $e->getMessage()]);\n        }\n    }\n}"
        }
    ]
}